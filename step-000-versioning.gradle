// step-000-versioning.gradle

import static java.lang.Boolean.parseBoolean
import static java.lang.Integer.parseInt

// Set additional properties
final props = new Properties()
file("version.properties").withInputStream { props.load(it) }

// Map additional properties into normal project.properties map
ext {
    major = parseInt(props.getProperty("major"))
    minor = parseInt(props.getProperty("minor"))
    patch = parseInt(props.getProperty("patch"))
}
// Check if this is a CI build
if (project.hasProperty("ci")) {
    ext.ci = parseBoolean(project.getProperty("ci") as String)
    ext.buildNumber = System.getenv("BUILD_RUN_NUMBER")

    if (buildNumber == null) {
        throw new RuntimeException("Build number can not be null")
    }
} else {
    ext.ci 		 	= false
    ext.buildNumber = null
}

if (project.hasProperty("snapshot")) {
    ext.snapshot 	= parseBoolean(project.getProperty("snapshot") as String)
    ext.beta 	 	= false
    ext.alpha    	= false
    ext.canary   	= false
    ext.release 	= false
} else if (project.hasProperty("beta")) {
    ext.snapshot 	= false
    ext.beta 		= parseBoolean(project.getProperty("beta") as String)
    ext.alpha    	= false
    ext.canary   	= false
    ext.release 	= false
} else if (project.hasProperty("alpha")) {
    ext.snapshot 	= false
    ext.beta 	 	= false
    ext.alpha 		= parseBoolean(project.getProperty("alpha") as String)
    ext.canary   	= false
    ext.release 	= false
} else if (project.hasProperty("canary")) {
    ext.snapshot 	= false
    ext.beta 	 	= false
    ext.alpha    	= false
    ext.canary 		= parseBoolean(project.getProperty("canary") as String)
    ext.release 	= false
} else if (project.hasProperty("release")) {
    ext.snapshot 	= false
    ext.beta 	 	= false
    ext.alpha    	= false
    ext.canary 		= false
    ext.release 	= parseBoolean(project.getProperty("release") as String)
} else {
    ext.snapshot 	= false
    ext.beta 	 	= false
    ext.alpha    	= false
    ext.canary 		= false
    ext.release 	= false
}

if (ci && buildNumber != null) {
    if (snapshot) {
        version = "$major.$minor.$patch.$buildNumber" + "-SNAPSHOT"
    } else if (beta) {
        version = "$major.$minor.$patch.$buildNumber" + "-BETA"
    } else if (alpha) {
        version = "$major.$minor.$patch.$buildNumber" + "-ALPHA"
    } else if (canary) {
        version = "$major.$minor.$patch.$buildNumber" + "-CANARY"
    } else if (release) {
        version = "$major.$minor.$patch.$buildNumber"
    } else { // Assumes release
        version = "$major.$minor.$patch.$buildNumber"
    }
} else {
    if (snapshot) {
        version = "$major.$minor.$patch" + "-SNAPSHOT"
    } else if (beta) {
        version = "$major.$minor.$patch" + "-BETA"
    } else if (alpha) {
        version = "$major.$minor.$patch" + "-ALPHA"
    } else if (canary) {
        version = "$major.$minor.$patch" + "-CANARY"
    } else if (release) {
        version = "$major.$minor.$patch"
    } else { // Assumes local build
        version = "$major.$minor.$patch" + "-LOCAL"
    }
}

task printVersion {
    doLast {
        println "$version"
    }
}

task incrementVersion(type: WriteProperties) { // this erases the whole file
    if (project.hasProperty("versionIncrementType")) {
        final incrementType = project.getProperty("versionIncrementType") as String

        if (incrementType.equalsIgnoreCase("MAJOR")) {
            major += 1
        } else if (incrementType.equalsIgnoreCase("MINOR")) {
            minor += 1
        } else if (incrementType.equalsIgnoreCase("PATCH")) {
            patch += 1
        } else {
            throw new RuntimeException("Not a valid version part")
        }
    }

    outputFile = file('version.properties')
    property 'comment', 'THIS FILE REGENERATED AT BUILD TIME'
    property 'major', major
    property 'minor', minor
    property 'patch', patch
}